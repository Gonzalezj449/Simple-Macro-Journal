import tkinter as tk
from tkinter import messagebox, simpledialog

class CaloriePage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.calorie_goal = None
        self.meals = {'Breakfast': {'items': [], 'frame': None}, 'Lunch': {'items': [], 'frame': None}, 'Dinner': {'items': [], 'frame': None}, 'Snacks': {'items': [], 'frame': None}}
        self.available_food = ['Chicken', 'Beef', 'Egg', 'Salad', 'Soup', 'Fish', 'Pasta']
        self.create_widgets()

    def create_widgets(self):
        # Logout button
        logout_button = tk.Button(self, text="Logout", command=self.logout)
        logout_button.grid(row=0, column=1, sticky="ne", padx=10, pady=10)

        # Label to display calorie goal
        self.goal_label = tk.Label(self, text=f"Calorie Goal: {self.calorie_goal}", font=("Arial", 16))
        self.goal_label.grid(row=0, column=0, columnspan=2, sticky="w", padx=10, pady=10)

        # Frame for displaying meal sections
        self.meal_sections_frame = tk.Frame(self)
        self.meal_sections_frame.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        # Add meal sections
        for i, meal_category in enumerate(self.meals.keys()):
            self.add_meal_section(meal_category, row=i+2)

        # Label to display total calories
        self.total_calories_label = tk.Label(self, text="Total Consumed: 0", font=("Arial", 16))
        self.total_calories_label.grid(row=len(self.meals)+2, column=0, columnspan=2, pady=10)

        # Button to calculate and show result
        calculate_button = tk.Button(self, text="Calculate", command=self.calculate)
        calculate_button.grid(row=len(self.meals)+3, column=0, columnspan=2, pady=10)

    def add_meal_section(self, meal_category, row):
        section_frame = tk.Frame(self.meal_sections_frame)
        section_frame.grid(row=row, column=0, columnspan=2, padx=10, pady=(0, 10))

        # Label for meal category
        category_label = tk.Label(section_frame, text=meal_category, font=("Arial", 14, "bold"))
        category_label.grid(row=0, column=0, pady=(0, 5), sticky="w")

        # Dropdown for selecting food
        food_selection = tk.StringVar()
        food_selection.set("Select Food")
        food_dropdown = tk.OptionMenu(section_frame, food_selection, *self.available_food)
        food_dropdown.grid(row=0, column=1, pady=(0, 5), sticky="e")

        # Button to add food
        add_food_button = tk.Button(section_frame, text="+ Add Food", command=lambda category=meal_category, food_selection=food_selection: self.add_food(category, food_selection))
        add_food_button.grid(row=0, column=2, pady=(0, 5), padx=(10, 0), sticky="w")

        # Frame to display added food
        meal_frame = tk.Frame(section_frame)
        meal_frame.grid(row=1, column=0, columnspan=3, padx=10, pady=(0, 5), sticky="w")

        # Save the meal frame for later use
        self.meals[meal_category]['frame'] = meal_frame

    def set_calorie_goal(self, calorie_goal):
        self.calorie_goal = int(calorie_goal)
        self.update_goal_label()

    def add_food(self, meal_category, food_selection):
        food_name = food_selection.get()
        if food_name == "Select Food":
            tk.messagebox.showerror("Error", "Please select a food item.")
            return

        calories = tk.simpledialog.askinteger("Add Food", f"Enter calories for {food_name}:")
        if calories:
            self.meals[meal_category]['items'].append({'name': food_name, 'calories': calories})
            self.update_total_calories_label()  # Update total calories count
            self.update_meals_display()  # Update the display of added meals

    def update_total_calories_label(self):
        total_calories = sum(meal['calories'] for meal_data in self.meals.values() for meal in meal_data['items'])
        self.total_calories_label.config(text=f"Total Calories: {total_calories}")

    def update_meals_display(self):
        for meal_category, meal_data in self.meals.items():
            meal_frame = meal_data['frame']
            # Clear previous meals
            for widget in meal_frame.winfo_children():
                widget.destroy()

            # Display added meals
            for meal in meal_data['items']:
                meal_text = f"{meal['name']} - Calories: {meal['calories']}"
                meal_label = tk.Label(meal_frame, text=meal_text)
                meal_label.pack(anchor="w", padx=30)

    def update_goal_label(self):
        self.goal_label.config(text=f"Calorie Goal: {self.calorie_goal}")

    def calculate(self):
        total_calories = sum(meal['calories'] for meal_data in self.meals.values() for meal in meal_data['items'])

        if total_calories < self.calorie_goal:
            result_message = f"You are under your calorie goal by {self.calorie_goal - total_calories} calories."
        elif total_calories > self.calorie_goal:
            result_message = f"You are over your calorie goal by {total_calories - self.calorie_goal} calories."
        else:
            result_message = "You have reached your calorie goal exactly."

        tk.messagebox.showinfo("Result", f"Total Calories: {total_calories}\n{result_message}")

    def logout(self):
        # Perform logout actions
        print("Logout")
        self.controller.show_page("LoginPage")